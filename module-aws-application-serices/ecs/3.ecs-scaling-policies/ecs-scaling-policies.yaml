Parameters:
  ECSClusterName:
    Description: Name of the ECS Cluster
    Type: String

  ECSServiceName:
    Description: Name of the ECS Service
    Type: String

  EcsAutoScalingRoleName:
    Description: Name of the ECS Auto Scaling Role
    Type: String

Resources:

  EcsServiceScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Sub service/${ECSClusterName}/${ECSServiceName}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/${EcsAutoScalingRoleName}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSServiceScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref EcsServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        CoolDown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  CloudWatchAlarmHighCPU:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 75
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ServiceName
          Value: !Ref ECSServiceName
        - Name: ClusterName
          Value: !Ref ECSClusterName
      AlarmActions:
        - !Ref ECSServiceScalingPolicy
